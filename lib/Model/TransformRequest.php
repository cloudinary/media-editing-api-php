<?php
/**
 * TransformRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Cloudinary
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cloudinary Media Editing API
 *
 * Cloudinary Media Editing API
 *
 * The version of the OpenAPI document: 0.1.0-beta
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Cloudinary\Model;

use \ArrayAccess;
use \Cloudinary\ObjectSerializer;

/**
 * TransformRequest Class Doc Comment
 *
 * @category Class
 * @package  Cloudinary
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TransformRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TransformRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'input_type' => 'string',
        'resource_type' => 'string',
        'url' => 'string',
        'media_source' => '\Cloudinary\Model\MediaConnectorInstance',
        'transformation_descriptor' => '\Cloudinary\Model\TransformationDescriptor',
        'async' => 'bool',
        'notification_url' => 'string',
        'media_target' => '\Cloudinary\Model\MediaConnectorInstance'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'input_type' => null,
        'resource_type' => null,
        'url' => 'uri',
        'media_source' => null,
        'transformation_descriptor' => null,
        'async' => null,
        'notification_url' => 'uri',
        'media_target' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'input_type' => 'input_type',
        'resource_type' => 'resource_type',
        'url' => 'url',
        'media_source' => 'media_source',
        'transformation_descriptor' => 'transformation_descriptor',
        'async' => 'async',
        'notification_url' => 'notification_url',
        'media_target' => 'media_target'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'input_type' => 'setInputType',
        'resource_type' => 'setResourceType',
        'url' => 'setUrl',
        'media_source' => 'setMediaSource',
        'transformation_descriptor' => 'setTransformationDescriptor',
        'async' => 'setAsync',
        'notification_url' => 'setNotificationUrl',
        'media_target' => 'setMediaTarget'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'input_type' => 'getInputType',
        'resource_type' => 'getResourceType',
        'url' => 'getUrl',
        'media_source' => 'getMediaSource',
        'transformation_descriptor' => 'getTransformationDescriptor',
        'async' => 'getAsync',
        'notification_url' => 'getNotificationUrl',
        'media_target' => 'getMediaTarget'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const INPUT_TYPE_URL = 'url';
    public const INPUT_TYPE_MEDIA_SOURCE = 'media_source';
    public const RESOURCE_TYPE_IMAGE = 'image';
    public const RESOURCE_TYPE_VIDEO = 'video';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInputTypeAllowableValues()
    {
        return [
            self::INPUT_TYPE_URL,
            self::INPUT_TYPE_MEDIA_SOURCE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResourceTypeAllowableValues()
    {
        return [
            self::RESOURCE_TYPE_IMAGE,
            self::RESOURCE_TYPE_VIDEO,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['input_type'] = $data['input_type'] ?? null;
        $this->container['resource_type'] = $data['resource_type'] ?? null;
        $this->container['url'] = $data['url'] ?? null;
        $this->container['media_source'] = $data['media_source'] ?? null;
        $this->container['transformation_descriptor'] = $data['transformation_descriptor'] ?? null;
        $this->container['async'] = $data['async'] ?? null;
        $this->container['notification_url'] = $data['notification_url'] ?? null;
        $this->container['media_target'] = $data['media_target'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['input_type'] === null) {
            $invalidProperties[] = "'input_type' can't be null";
        }
        $allowedValues = $this->getInputTypeAllowableValues();
        if (!is_null($this->container['input_type']) && !in_array($this->container['input_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'input_type', must be one of '%s'",
                $this->container['input_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getResourceTypeAllowableValues();
        if (!is_null($this->container['resource_type']) && !in_array($this->container['resource_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'resource_type', must be one of '%s'",
                $this->container['resource_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['transformation_descriptor'] === null) {
            $invalidProperties[] = "'transformation_descriptor' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets input_type
     *
     * @return string
     */
    public function getInputType()
    {
        return $this->container['input_type'];
    }

    /**
     * Sets input_type
     *
     * @param string $input_type The media input type
     *
     * @return self
     */
    public function setInputType($input_type)
    {
        $allowedValues = $this->getInputTypeAllowableValues();
        if (!in_array($input_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'input_type', must be one of '%s'",
                    $input_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['input_type'] = $input_type;

        return $this;
    }

    /**
     * Gets resource_type
     *
     * @return string|null
     */
    public function getResourceType()
    {
        return $this->container['resource_type'];
    }

    /**
     * Sets resource_type
     *
     * @param string|null $resource_type The resource type to be processed
     *
     * @return self
     */
    public function setResourceType($resource_type)
    {
        $allowedValues = $this->getResourceTypeAllowableValues();
        if (!is_null($resource_type) && !in_array($resource_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'resource_type', must be one of '%s'",
                    $resource_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['resource_type'] = $resource_type;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url URL of the asset to be transformed
     *
     * @return self
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets media_source
     *
     * @return \Cloudinary\Model\MediaConnectorInstance|null
     */
    public function getMediaSource()
    {
        return $this->container['media_source'];
    }

    /**
     * Sets media_source
     *
     * @param \Cloudinary\Model\MediaConnectorInstance|null $media_source media_source
     *
     * @return self
     */
    public function setMediaSource($media_source)
    {
        $this->container['media_source'] = $media_source;

        return $this;
    }

    /**
     * Gets transformation_descriptor
     *
     * @return \Cloudinary\Model\TransformationDescriptor
     */
    public function getTransformationDescriptor()
    {
        return $this->container['transformation_descriptor'];
    }

    /**
     * Sets transformation_descriptor
     *
     * @param \Cloudinary\Model\TransformationDescriptor $transformation_descriptor transformation_descriptor
     *
     * @return self
     */
    public function setTransformationDescriptor($transformation_descriptor)
    {
        $this->container['transformation_descriptor'] = $transformation_descriptor;

        return $this;
    }

    /**
     * Gets async
     *
     * @return bool|null
     */
    public function getAsync()
    {
        return $this->container['async'];
    }

    /**
     * Sets async
     *
     * @param bool|null $async Whether to perform the request asynchronously. Use a notification URL to be notified once the transformation has completed
     *
     * @return self
     */
    public function setAsync($async)
    {
        $this->container['async'] = $async;

        return $this;
    }

    /**
     * Gets notification_url
     *
     * @return string|null
     */
    public function getNotificationUrl()
    {
        return $this->container['notification_url'];
    }

    /**
     * Sets notification_url
     *
     * @param string|null $notification_url The URL to send notifications once a transformation has completed
     *
     * @return self
     */
    public function setNotificationUrl($notification_url)
    {
        $this->container['notification_url'] = $notification_url;

        return $this;
    }

    /**
     * Gets media_target
     *
     * @return \Cloudinary\Model\MediaConnectorInstance|null
     */
    public function getMediaTarget()
    {
        return $this->container['media_target'];
    }

    /**
     * Sets media_target
     *
     * @param \Cloudinary\Model\MediaConnectorInstance|null $media_target media_target
     *
     * @return self
     */
    public function setMediaTarget($media_target)
    {
        $this->container['media_target'] = $media_target;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


